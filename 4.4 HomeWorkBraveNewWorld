using System;
using System.IO;

namespace HMBraveNewWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.CursorVisible = false;

            int sumHeart = 0;
            bool isPlaing = true;
            char symbolHeart = '♥';
            char[,] map =
             {
                {'#',' ','#','#','#','#','#','#','#','#','#','#','#','#','#' },
                {'#',' ','#','♥','#','#',' ','#',' ','#','#','♥',' ','#','#' },
                {'#',' ',' ',' ',' ',' ','#',' ',' ',' ','#','#',' ','♥','#' },
                {'#','#',' ','#','#',' ','#',' ','#',' ',' ',' ',' ','#','#' },
                {'#',' ',' ','♥','#',' ',' ',' ','#',' ','♥','#',' ',' ','#' },
                {'#','#',' ',' ','#','♥','#','♥',' ','#','#','#',' ',' ','#' },
                {'#',' ',' ','#',' ','#',' ',' ',' ',' ',' ','#',' ','#','#' },
                {'#','♥','#',' ','#','♥',' ','#','♥','#',' ',' ',' ',' ','#' },
                {'#',' ',' ','#','♥','#',' ','♥','#',' ','♥','#','#',' ','#' },
                {'#','#',' ',' ',' ',' ',' ','#',' ',' ','#','#','#','♥','#' },
                {'#',' ','#','#',' ','♥','#',' ',' ',' ',' ',' ',' ','#','#' },
                {'#','♥',' ',' ',' ','#','#',' ','#',' ','♥','#',' ',' ','#' },
                {'#','#','#','#','#','#','#','#','#','#','#','#','#','_','#' },
            };

            Console.SetCursorPosition(0, 15);
            Console.WriteLine($"Пройди лабиринт! Собери как можно больше {symbolHeart}");
            Console.SetCursorPosition(0, 0);
            int userPositionX = 1;
            int userPositionY = 0;

            while (isPlaing)
            {
                DrawMap(map);

                DrawPlayer(userPositionX, userPositionY);

                ShiftMarker(map, ref userPositionY, ref userPositionX);

                char symbolEndGame = '_';

                if (map[userPositionY, userPositionX] == symbolHeart)
                {
                    map[userPositionY, userPositionX] = ' ';

                    sumHeart += 1;
                }
                else if (map[userPositionY, userPositionX] == symbolEndGame)
                {
                    Console.Clear();
                    Console.WriteLine($"Лабирин пройден!!! Собрано {sumHeart} {symbolHeart}");
                    isPlaing = false;
                }
            }
        }

        static void ShiftMarker(char[,] map, ref int positionX, ref int positionY)
        {
            string directionUp = "Up";
            string directionDown = "Down";
            string directionLeft = "Left";
            string directionRight = "Right";
            ConsoleKeyInfo charKey = Console.ReadKey();

            switch (charKey.Key)
            {
                case ConsoleKey.UpArrow:
                    OffsetMarker(map, charKey, positionX - 1, positionY, ref positionX, directionUp);
                    break;

                case ConsoleKey.DownArrow:
                    OffsetMarker(map, charKey, positionX + 1, positionY, ref positionX, directionDown);
                    break;

                case ConsoleKey.LeftArrow:
                    OffsetMarker(map, charKey, positionX, positionY - 1, ref positionY, directionLeft);
                    break;

                case ConsoleKey.RightArrow:
                    OffsetMarker(map, charKey, positionX, positionY + 1, ref positionY, directionRight);
                    break;

                default:
                    Console.CursorVisible = true;
                    break;
            }
        }

        static void OffsetMarker(char[,] map, ConsoleKeyInfo charKey, int positionX, int positionY, ref int positionShift, string direction)
        {
            bool isBarrier = false;

            InspectBorder(map, positionX, positionY, ref isBarrier);
            MovePlayer(charKey, ref positionShift, isBarrier, direction);
        }

        static void InspectBorder(char[,] map, int positionX, int positionY, ref bool isBarrier)
        {
            char symbolWall = '#';

            if (map[positionX, positionY] == symbolWall)
            {
                isBarrier = true;
            }
        }

        static void MovePlayer(ConsoleKeyInfo charKey, ref int position, bool isBarrier, string direction)
        {
            if (isBarrier == false)
            {
                if (direction == "Down" || direction == "Right")
                {
                    position++;
                }
                else if (direction == "Up" || direction == "Left")
                {
                    position--;
                }
            }
        }

        static void DrawMap(char[,] map)
        {
            Console.SetCursorPosition(0, 0);

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }

                Console.WriteLine();
            }
        }

        static void DrawPlayer(int userPositionX, int userPositionY)
        {
            string user = "☻";
            Console.SetCursorPosition(userPositionX, userPositionY);
            Console.Write(user);
        }
    }
}
